export class DTSocketServer_BroadcastOperator {
    server;
    rooms;
    excludeSockets;
    constructor(server, rooms, excludeSockets = []) {
        this.server = server;
        this.rooms = rooms;
        this.excludeSockets = excludeSockets;
    }
    emit(event, ...args) {
        let sockets = new Set();
        for (const room of this.rooms) {
            for (const socket of this.server.rooms.get(room) || []) {
                sockets.add(socket);
            }
        }
        for (const socket of this.excludeSockets) {
            sockets.delete(socket);
        }
        for (const socket of sockets) {
            try {
                this.server.cSockets.get(socket)?.emit(event, ...args);
            }
            catch { }
        }
        return true;
    }
    to(room) {
        return new DTSocketServer_BroadcastOperator(this.server, this.rooms.concat(room), this.excludeSockets);
    }
}
