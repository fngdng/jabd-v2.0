export const InitProcedureGenerator = () => {
    return {
        input: (parser) => {
            return createProcedure(parser.parse);
        }
    };
};
function createProcedure(iCallback) {
    return {
        resolve: (oCallback) => {
            return new Procedure(iCallback, oCallback);
        },
        streamResolve: (oCallback, burst) => {
            return new StreamingProcedure(iCallback, oCallback, burst || false);
        }
    };
}
export class Procedure {
    iCallback;
    oCallback;
    signature = "procedure";
    constructor(iCallback, oCallback) {
        this.iCallback = iCallback;
        this.oCallback = oCallback;
    }
    execute(gState, lState, input, socket) {
        return this.oCallback(gState, lState, this.iCallback(input), socket);
    }
}
export class StreamingProcedure {
    iCallback;
    oCallback;
    burst;
    signature = "streamingProcedure";
    constructor(iCallback, oCallback, burst) {
        this.iCallback = iCallback;
        this.oCallback = oCallback;
        this.burst = burst;
    }
    execute(gState, lState, input, socket) {
        return this.oCallback(gState, lState, this.iCallback(input), socket);
    }
}
