/// <reference types="node" />
import { EventEmitter } from "events";
import type { CSEventTable, GetTypeContext, SCEventTable, ServerContext, Socket, SymbolEventTableType, SymbolLocalStateType, SymbolSocketImplType } from "./types";
import type { DTSocketServer } from "./server.js";
import { DTSocketServer_BroadcastOperator } from "./server_broadcast.js";
export interface DTSocketServer_CSocket<Context extends ServerContext> extends EventEmitter {
    on<T extends keyof CSEventTable<GetTypeContext<Context, SymbolEventTableType>>>(event: T, callback: (...args: CSEventTable<GetTypeContext<Context, SymbolEventTableType>>[T]) => void): this;
    on(event: string | symbol, callback: (...args: any[]) => void): this;
    emit<T extends keyof SCEventTable<GetTypeContext<Context, SymbolEventTableType>>>(event: T, ...args: SCEventTable<GetTypeContext<Context, SymbolEventTableType>>[T]): boolean;
    emit(event: string | symbol, ...args: any[]): boolean;
}
export declare class DTSocketServer_CSocket<Context extends ServerContext, SocketImpl extends Socket = GetTypeContext<Context, SymbolSocketImplType>> extends EventEmitter {
    id: string;
    socket: SocketImpl;
    server: DTSocketServer<Context>;
    private m2Table;
    private m2RecvCounter;
    private m2SendCounter;
    get lState(): Partial<GetTypeContext<Context, SymbolLocalStateType>>;
    constructor(id: string, socket: SocketImpl, server: DTSocketServer<Context>);
    join(room: string): void;
    leave(room: string): void;
    leaveAll(): void;
    get rooms(): Set<string>;
    to(room: string | string[]): DTSocketServer_BroadcastOperator<Context>;
}
