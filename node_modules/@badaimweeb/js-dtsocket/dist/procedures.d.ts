import type { DTSocketServer_CSocket } from "./server_csocket";
import type { ServerContext, GetTypeContext, SymbolGlobalStateType, SymbolLocalStateType, Socket } from "./types";
export type EventTableBase = {
    csEvents: {
        [event: string]: (...args: any[]) => void;
    };
    scEvents: {
        [event: string]: (...args: any[]) => void;
    };
};
export declare const InitProcedureGenerator: <Context extends ServerContext>() => {
    input: <TIn>(parser: {
        parse: (input: unknown) => TIn;
    }) => ReturnType<typeof createProcedure<TIn, Context>>;
};
declare function createProcedure<TIn, Context extends ServerContext>(iCallback: (input: unknown) => TIn): ({
    resolve: <TOut>(oCallback: (gState: GetTypeContext<Context, SymbolGlobalStateType>, lState: Partial<GetTypeContext<Context, SymbolLocalStateType>>, input: TIn, socket: DTSocketServer_CSocket<Context>) => TOut | PromiseLike<TOut>) => Procedure<TIn, TOut, Context>;
    streamResolve: <TOut>(oCallback: (gState: GetTypeContext<Context, SymbolGlobalStateType>, lState: Partial<GetTypeContext<Context, SymbolLocalStateType>>, input: TIn, socket: DTSocketServer_CSocket<Context>) => AsyncIterable<TOut>, burst?: boolean) => StreamingProcedure<TIn, TOut, Context>;
});
export declare class Procedure<TIn, TOut, Context extends ServerContext> {
    private iCallback;
    private oCallback;
    readonly signature = "procedure";
    constructor(iCallback: (input: unknown) => TIn, oCallback: (gState: GetTypeContext<Context, SymbolGlobalStateType>, lState: Partial<GetTypeContext<Context, SymbolLocalStateType>>, input: TIn, socket: DTSocketServer_CSocket<Context, Socket>) => TOut | PromiseLike<TOut>);
    execute(gState: GetTypeContext<Context, SymbolGlobalStateType>, lState: Partial<Partial<GetTypeContext<Context, SymbolLocalStateType>>>, input: TIn, socket: DTSocketServer_CSocket<Context, Socket>): TOut | PromiseLike<TOut>;
}
export declare class StreamingProcedure<TIn, TOut, Context extends ServerContext> {
    private iCallback;
    private oCallback;
    burst: boolean;
    readonly signature = "streamingProcedure";
    constructor(iCallback: (input: unknown) => TIn, oCallback: (gState: GetTypeContext<Context, SymbolGlobalStateType>, lState: Partial<GetTypeContext<Context, SymbolLocalStateType>>, input: TIn, socket: DTSocketServer_CSocket<Context, Socket>) => AsyncIterable<TOut>, burst: boolean);
    execute(gState: GetTypeContext<Context, SymbolGlobalStateType>, lState: Partial<GetTypeContext<Context, SymbolLocalStateType>>, input: TIn, socket: DTSocketServer_CSocket<Context, Socket>): AsyncIterable<TOut>;
}
export {};
