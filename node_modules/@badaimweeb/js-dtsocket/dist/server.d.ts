/// <reference types="node" />
import type { ServerContext, SymbolGlobalStateType, SymbolLocalStateType, SymbolEventTableType, SymbolProceduresType, SymbolSocketImplType, GetTypeContext, DefaultServerContext } from "./types.js";
import { DTSocketServer_CSocket } from "./server_csocket.js";
import { EventEmitter } from "events";
import { DTSocketServer_BroadcastOperator } from "./server_broadcast.js";
export interface DTSocketServer<Context extends ServerContext> extends EventEmitter {
    on(event: "session", callback: (cSocket: DTSocketServer_CSocket<Context>) => void): this;
    on<T extends keyof GetTypeContext<Context, SymbolEventTableType>["csEvents"]>(event: T, callback: (...args: Parameters<GetTypeContext<Context, SymbolEventTableType>["csEvents"][T]>) => void): this;
    on(event: string | symbol, callback: (...args: any[]) => void): this;
    originalEmit(event: "session", cSocket: DTSocketServer_CSocket<Context>): boolean;
    originalEmit<T extends keyof GetTypeContext<Context, SymbolEventTableType>["csEvents"]>(event: T, ...args: Parameters<GetTypeContext<Context, SymbolEventTableType>["csEvents"][T]>): boolean;
    originalEmit(event: string | symbol, ...args: any[]): boolean;
    emit<T extends keyof GetTypeContext<Context, SymbolEventTableType>["scEvents"]>(event: T, ...args: Parameters<GetTypeContext<Context, SymbolEventTableType>["scEvents"][T]>): boolean;
    emit(event: string, ...args: any[]): boolean;
}
export declare class DTSocketServer<Context extends ServerContext = DefaultServerContext> extends EventEmitter {
    procedures: GetTypeContext<Context, SymbolProceduresType>;
    globalState: GetTypeContext<Context, SymbolGlobalStateType>;
    localState: Map<string, Partial<GetTypeContext<Context, SymbolLocalStateType>>>;
    rooms: Map<string, Set<string>>;
    cSockets: Map<string, DTSocketServer_CSocket<Context>>;
    constructor(procedures: GetTypeContext<Context, SymbolProceduresType>, defaultGlobalState?: GetTypeContext<Context, SymbolGlobalStateType>);
    processSession<T extends GetTypeContext<Context, SymbolSocketImplType>>(socket: T): Promise<DTSocketServer_CSocket<Context, T>>;
    removeSession(socket: GetTypeContext<Context, SymbolSocketImplType>): Promise<void>;
    to(room: string | string[]): DTSocketServer_BroadcastOperator<Context>;
}
