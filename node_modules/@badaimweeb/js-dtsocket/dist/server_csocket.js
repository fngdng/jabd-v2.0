import { EventEmitter } from "events";
import { encode, decode } from "msgpack-lite";
import { DTSocketServer_BroadcastOperator } from "./server_broadcast.js";
export class DTSocketServer_CSocket extends EventEmitter {
    id;
    socket;
    server;
    m2Table = {};
    m2RecvCounter = new Map();
    m2SendCounter = new Map();
    get lState() {
        return this.server.localState.get(this.id) || {};
    }
    constructor(id, socket, server) {
        super();
        this.id = id;
        this.socket = socket;
        this.server = server;
        let originalEmit = this.emit.bind(this);
        this.emit = (event, ...args) => {
            if (!this.m2SendCounter.has(event))
                this.m2SendCounter.set(event, 0);
            socket.send(1, encode([
                2, event, this.m2SendCounter.get(event), ...args
            ]));
            this.m2SendCounter.set(event, this.m2SendCounter.get(event) + 1);
            return true;
        };
        this.join(id);
        socket.on("data", async (qos, data) => {
            try {
                let decodedData = decode(data);
                if (typeof decodedData[0] !== "number")
                    throw new Error("Invalid data");
                switch (decodedData[0]) {
                    case 0:
                        // Standard procedure
                        if (!qos)
                            return;
                        let m0Data = decodedData.slice(1);
                        if (typeof m0Data[0] !== "number" || typeof m0Data[1] !== "string")
                            throw new Error("Invalid data");
                        let procedure = server.procedures[m0Data[1]];
                        if (!procedure || procedure.signature !== "procedure") {
                            socket.send(1, encode([
                                0, m0Data[0], false, "Procedure not found"
                            ]));
                        }
                        try {
                            if (!server.localState.get(id))
                                server.localState.set(id, {});
                            let result = await procedure.execute(server.globalState, server.localState.get(id), m0Data[2], this);
                            socket.send(1, encode([
                                0, m0Data[0], true, result
                            ]));
                        }
                        catch (e) {
                            socket.send(1, encode([
                                0, m0Data[0], false, e instanceof Error ? e.message : e
                            ]));
                        }
                        break;
                    case 1:
                        // Streaming procedure
                        if (!qos)
                            return;
                        let m1Data = decodedData.slice(1);
                        if (typeof m1Data[0] !== "number" || typeof m1Data[1] !== "string")
                            throw new Error("Invalid data");
                        let streamingProcedure = server.procedures[m1Data[1]];
                        if (!streamingProcedure ||
                            streamingProcedure.signature !== "streamingProcedure") {
                            socket.send(1, encode([
                                1, m1Data[0], 2, 0, "Procedure not found"
                            ]));
                            return;
                        }
                        let packetCount = 0;
                        try {
                            if (!server.localState.get(id))
                                server.localState.set(id, {});
                            let stream = streamingProcedure.execute(server.globalState, server.localState.get(id), m1Data[2], this);
                            for await (let packet of stream) {
                                let waitACK = socket.send(1, encode([
                                    1, m1Data[0], 0, packetCount++, packet
                                ]));
                                if (!streamingProcedure.burst) {
                                    await waitACK;
                                }
                            }
                            socket.send(1, encode([
                                1, m1Data[0], 1, packetCount
                            ]));
                        }
                        catch (e) {
                            socket.send(1, encode([
                                1, m1Data[0], 2, packetCount, e instanceof Error ? e.message : e
                            ]));
                        }
                        break;
                    case 2:
                        // Ordered event transmission
                        if (!qos)
                            return;
                        let m2Data = decodedData.slice(1);
                        if (!this.m2RecvCounter.has(m2Data[0]))
                            this.m2RecvCounter.set(m2Data[0], 0);
                        if (typeof m2Data[1] !== "number")
                            throw new Error("Invalid data");
                        if (!this.m2Table[m2Data[0]])
                            this.m2Table[m2Data[0]] = new Map();
                        this.m2Table[m2Data[0]].set(m2Data[1], m2Data.slice(2));
                        if (m2Data[1] === this.m2RecvCounter.get(m2Data[0])) {
                            for (;;) {
                                let data = this.m2Table[m2Data[0]].get(this.m2RecvCounter.get(m2Data[0]));
                                if (!data)
                                    break;
                                this.m2Table[m2Data[0]].delete(this.m2RecvCounter.get(m2Data[0]));
                                this.m2RecvCounter.set(m2Data[0], this.m2RecvCounter.get(m2Data[0]) + 1);
                                originalEmit(m2Data[0], ...data);
                                if (m2Data[0] !== "session")
                                    this.server.originalEmit(m2Data[0], ...data);
                            }
                        }
                        break;
                }
            }
            catch (e) {
                console.log(e);
            }
        });
    }
    join(room) {
        if (!this.server.rooms.has(room))
            this.server.rooms.set(room, new Set());
        this.server.rooms.get(room).add(this.id);
    }
    leave(room) {
        if (!this.server.rooms.has(room))
            return;
        this.server.rooms.get(room).delete(this.id);
    }
    leaveAll() {
        for (let room of this.server.rooms.keys()) {
            this.leave(room);
        }
    }
    get rooms() {
        let rooms = new Set();
        for (let [room, clients] of this.server.rooms) {
            if (clients.has(this.id))
                rooms.add(room);
        }
        return rooms;
    }
    to(room) {
        return new DTSocketServer_BroadcastOperator(this.server, [...room], [this.id]);
    }
}
