/// <reference types="ws" />
import WebSocket from "isomorphic-ws";
import { WrappedConnection } from "./connection.js";
import ProtoV2dSession from "./session.js";
export type ClientCommonConfig = {
    /** How long after pinging should the connection be considered disconnected. (ms) */
    timeout?: number;
    /** How frequent to ping the other server. Lower value mean more frequent ping and more frequent latency value updates. (ms) */
    pingInterval?: number;
    publicKeys: ({
        type: "key";
        value: string | Uint8Array;
    } | {
        type: "hash";
        value: string | Uint8Array;
    } | {
        type: "noverify";
    })[];
    /** NOT RECOMMENDED: Only use this when debugging, as your data is transmitted as cleartext if there's no additional encryption layer (TLS) and is viewable using DevTools. */
    disableEncryption?: boolean;
    existingData?: {
        sessionKey?: Uint8Array;
        sessionID?: Uint8Array;
        sessionObject?: ProtoV2dSession;
    };
    handshakeV1?: "disabled" | "forced" | "auto";
    /** In case you're sure that the enviroment cannot run WASM at all, you can disable it. */
    disableWASM?: boolean;
};
export type ClientWSConfig = ClientCommonConfig & {
    url: string;
};
export type ClientWCConfig<BackendData = any> = ClientCommonConfig & {
    wc: WrappedConnection<BackendData>;
};
export type ClientReconnectConfig = {
    /** How long between two connection attempt. (ms) */
    reconnectionTime?: number;
    /** How many times to attempt to connect initially before giving up. */
    maxInitialRetries?: number;
    /**
     * Should the client attempt to reconnect no matter what?
     *
     * If set to true, .close() will instead restart the connection, not disconnecting session. NOT RECOMMENDED UNLESS CLIENT NEEDS TO BE ALWAYS CONNECTED.
     * */
    alwaysReconnect?: boolean;
};
/**
 * Connect to a ProtoV2d server over WebSocket.
 *
 * By default, `reconnectionTime` is 5s, this means that it will retry connection every 5s if the connection is closed; `timeout` is 10s.
 */
export declare function connect(config: ClientWSConfig & ClientReconnectConfig): Promise<ProtoV2dSession<WebSocket>>;
/**
 * Connect to a ProtoV2d server with your own protocol. This will handle reconnection for you.
 *
 * By default, `reconnectionTime` is 5s, this means that it will retry connection every 5s if the connection is closed; `timeout` is 10s.
 */
export declare function connectWithCustomConnect<CustomConfig, BackendData>(config: ClientCommonConfig & CustomConfig & ClientReconnectConfig, connectFunc: (config: ClientCommonConfig & CustomConfig) => Promise<ProtoV2dSession<BackendData>>): Promise<ProtoV2dSession<BackendData>>;
/** This does not implement reconnection. You should not use this directly, use {@link connect} instead. */
export declare function connectWebsocket(config: ClientWSConfig): Promise<ProtoV2dSession<WebSocket>>;
/**
 * This does not implement reconnection. You should only use this when using custom protocol, and you must self-handle session key/ID.
 *
 * Alternatively, make a function that wrap connection to {@link WrappedConnection} and use {@link connectWithCustomConnect} instead.
 */
export declare function connectWrapped<BackendData>(config: ClientWCConfig<BackendData>): Promise<ProtoV2dSession<BackendData>>;
