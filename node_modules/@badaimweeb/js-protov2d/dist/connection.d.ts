/// <reference types="node" />
import EventEmitter from "events";
import { Address4, Address6 } from "ip-address";
export interface WrappedConnection<BackendData> extends EventEmitter {
    /** Transmitting side of connection, you may hook to this and forward to your own protocol. */
    on(event: "tx", listener: (data: Uint8Array) => void): this;
    /** Send data. For internal/debugging only. */
    emit(event: "tx", data: Uint8Array): boolean;
    /** Receiving side of connection. For internal/debugging only. */
    on(event: "rx", listener: (data: Uint8Array) => void): this;
    /** Emit data from your own protocol to be handled. */
    emit(event: "rx", data: Uint8Array): boolean;
    /** Connection is closed. May be emitted multiple times, use `once`{@link once(event: "close")} instead. */
    on(event: "close", listener: (explictClose: boolean, reason?: string) => void): this;
    /** Connection is closed. */
    once(event: "close", listener: (explictClose: boolean, reason?: string) => void): this;
    /** Close connection. */
    emit(event: "close", explictClose: boolean, reason?: string): boolean;
}
export declare class WrappedConnection<BackendData = any> extends EventEmitter {
    realIP: Address4 | Address6 | null;
    backendData: BackendData | null;
    closed: boolean;
    constructor(realIP?: Address4 | Address6 | null, backendData?: BackendData | null);
    send(data: number[] | Uint8Array): boolean;
}
