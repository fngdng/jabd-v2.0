/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import type { Server as HTTPServer, IncomingMessage } from "http";
import type { Server as HTTPSServer } from "https";
import ws from "ws";
import { EventEmitter } from "events";
import { Buffer } from "buffer";
import ProtoV2dSession from "./session.js";
import type { Duplex } from "stream";
import { WrappedConnection } from "./connection.js";
/**
 * This config allows you to choose 4 modes of upgrading connections:
 * 1. Using a port number
 * 2. Using an existing HTTP(S) server
 * 3. Passing no config, which indicates that you'll handle connection yourself and pass it here to upgrade.
 * 4. Passing a WS server.
 *
 * In all cases, you need to provide a private key and a public key.
 *
 * If you are behind a proxy (either local reverse proxy or cloudflare), you can set `trustProxy` to true or an array of trusted proxies CIDR.
 *
 * For debugging purposes, you may enable `allowDisableEncryption` to allow clients to disable encryption.
 *
 * In case you want to explictly disable WASM, you may set `disableWASM` to `true`. JS fallback will be used instead.
 */
export type ServerConfig = {
    privateKey: string | Uint8Array;
    publicKey: string | Uint8Array;
    streamTimeout?: number;
    pingTimeout?: number;
    pingInterval?: number;
    pingAvgCount?: number;
    trustProxy?: boolean | string[];
    allowDisableEncryption?: boolean;
    disableWASM?: boolean;
} & ({
    port: number;
} | {
    server: HTTPServer | HTTPSServer;
} | {
    wsServer: ws.Server;
} | {});
export interface ProtoV2dServer extends EventEmitter {
    /** This event will return session from clients. */
    on(event: "connection", listener: (session: ProtoV2dSession) => void): this;
    emit(event: "connection", session: ProtoV2dSession): boolean;
    /** Dead/timed out session will be emitted here. */
    on(event: "dropConnection", listener: (session: ProtoV2dSession) => void): this;
    emit(event: "dropConnection", session: ProtoV2dSession): boolean;
}
export declare class ProtoV2dServer extends EventEmitter {
    private config;
    private debug;
    wsServer: ws.Server;
    private sessions;
    private trustProxy;
    private kyber;
    private dilithium5;
    private pqKeyPair;
    private classicKeyPair;
    private publicKeyHash;
    /**
     * You may see {@link ServerConfig} for more information on how to config this.
     */
    constructor(config: ServerConfig);
    /** Pass upgrade request from HTTP here. */
    handleWSUpgrade(request: IncomingMessage, socket: Duplex, head: Buffer): void;
    /** Pass existing WebSocket connection here. */
    handleWSConnection(client: ws.WebSocket, header: IncomingMessage): void;
    /** If you're using a custom protocol, receive data from proxy, etc..., construct WrappedConnection and pass data to "rx", send data from "tx". After that, put that object here. */
    handleWrappedConnection(wc: WrappedConnection): void;
    private _handleSessionLifecycle;
}
